name: vpro-actions
on: workflow_dispatch
env:
    AWS_REGION: us-east-1
    ECR_REPOSITORY: cjaydevops
    EKS_CLUSTER_NAME: cjay-eks

jobs:
    Testing:
        runs-on: ubuntu-latest
        steps:
            - name: Code Checkout
              uses: actions/checkout@v4
              
            - name: Maven Test
              run: mvn test

            - name: Maven checkstyle
              run: mvn checkstyle:checkstyle

            - name: Setup Java Version
              uses: actions/setup-java@v4
              with:
                distribution: 'temurin'
                java-version: '11'
                
            - name: Setup SonarQube
              uses: warchant/setup-sonar-scanner@v7

            - name: SonarQube Scan
              run: sonar-scanner
                   -Dsonar.host.url=${{ secrets.SONAR_URL }}
                   -Dsonar.login=${{ secrets.SONAR_KEY }}
                   -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
                   -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
                   -Dsonar.sources=src/
                   -Dsonar.junit.reportsPath=target/surefire-reports/
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account

            - name: SonarQube Quality Gate check
              id: sonarqube-quality-gate-check
              uses: sonarsource/sonarqube-quality-gate-action@master
              timeout-minutes: 5
              env:
                SONAR_TOKEN: ${{ secrets.SONAR_KEY }}
                SONAR_HOST_URL: ${{ secrets.SONAR_URL }}


    BUILD_AND_PUBLISH_DOCKER_IMAGE:
        runs-on: ubuntu-latest
        steps:
            - name: Code Checkout
              uses: actions/checkout@v4

            - name: upload image to ECR
              uses: appleboy/docker-ecr-action@master
              with:
                access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
                secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                registry: ${{ secrets.REGISTRY }}
                repo: ${{ env.ECR_REPOSITORY}}
                region: ${{ env.AWS_REGION}}
                tags: latest,${{ github.run_number}}
                daemon_off: false
                dockerfile: ./Dockerfile
                context: ./


